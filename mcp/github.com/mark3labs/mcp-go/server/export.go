// export by github.com/goplus/igop/cmd/qexp

package server

import (
	q "github.com/mark3labs/mcp-go/server"

	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "server",
		Path: "github.com/mark3labs/mcp-go/server",
		Deps: map[string]string{
			"bufio":                           "bufio",
			"context":                         "context",
			"encoding/base64":                 "base64",
			"encoding/json":                   "json",
			"errors":                          "errors",
			"fmt":                             "fmt",
			"github.com/google/uuid":          "uuid",
			"github.com/mark3labs/mcp-go/mcp": "mcp",
			"io":                              "io",
			"log":                             "log",
			"net/http":                        "http",
			"net/http/httptest":               "httptest",
			"net/url":                         "url",
			"os":                              "os",
			"os/signal":                       "signal",
			"reflect":                         "reflect",
			"sort":                            "sort",
			"strings":                         "strings",
			"sync":                            "sync",
			"sync/atomic":                     "atomic",
			"syscall":                         "syscall",
			"time":                            "time",
		},
		Interfaces: map[string]reflect.Type{
			"ClientSession": reflect.TypeOf((*q.ClientSession)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"BeforeAnyHookFunc":                 reflect.TypeOf((*q.BeforeAnyHookFunc)(nil)).Elem(),
			"Hooks":                             reflect.TypeOf((*q.Hooks)(nil)).Elem(),
			"MCPServer":                         reflect.TypeOf((*q.MCPServer)(nil)).Elem(),
			"NotificationHandlerFunc":           reflect.TypeOf((*q.NotificationHandlerFunc)(nil)).Elem(),
			"OnAfterCallToolFunc":               reflect.TypeOf((*q.OnAfterCallToolFunc)(nil)).Elem(),
			"OnAfterGetPromptFunc":              reflect.TypeOf((*q.OnAfterGetPromptFunc)(nil)).Elem(),
			"OnAfterInitializeFunc":             reflect.TypeOf((*q.OnAfterInitializeFunc)(nil)).Elem(),
			"OnAfterListPromptsFunc":            reflect.TypeOf((*q.OnAfterListPromptsFunc)(nil)).Elem(),
			"OnAfterListResourceTemplatesFunc":  reflect.TypeOf((*q.OnAfterListResourceTemplatesFunc)(nil)).Elem(),
			"OnAfterListResourcesFunc":          reflect.TypeOf((*q.OnAfterListResourcesFunc)(nil)).Elem(),
			"OnAfterListToolsFunc":              reflect.TypeOf((*q.OnAfterListToolsFunc)(nil)).Elem(),
			"OnAfterPingFunc":                   reflect.TypeOf((*q.OnAfterPingFunc)(nil)).Elem(),
			"OnAfterReadResourceFunc":           reflect.TypeOf((*q.OnAfterReadResourceFunc)(nil)).Elem(),
			"OnBeforeCallToolFunc":              reflect.TypeOf((*q.OnBeforeCallToolFunc)(nil)).Elem(),
			"OnBeforeGetPromptFunc":             reflect.TypeOf((*q.OnBeforeGetPromptFunc)(nil)).Elem(),
			"OnBeforeInitializeFunc":            reflect.TypeOf((*q.OnBeforeInitializeFunc)(nil)).Elem(),
			"OnBeforeListPromptsFunc":           reflect.TypeOf((*q.OnBeforeListPromptsFunc)(nil)).Elem(),
			"OnBeforeListResourceTemplatesFunc": reflect.TypeOf((*q.OnBeforeListResourceTemplatesFunc)(nil)).Elem(),
			"OnBeforeListResourcesFunc":         reflect.TypeOf((*q.OnBeforeListResourcesFunc)(nil)).Elem(),
			"OnBeforeListToolsFunc":             reflect.TypeOf((*q.OnBeforeListToolsFunc)(nil)).Elem(),
			"OnBeforePingFunc":                  reflect.TypeOf((*q.OnBeforePingFunc)(nil)).Elem(),
			"OnBeforeReadResourceFunc":          reflect.TypeOf((*q.OnBeforeReadResourceFunc)(nil)).Elem(),
			"OnErrorHookFunc":                   reflect.TypeOf((*q.OnErrorHookFunc)(nil)).Elem(),
			"OnRegisterSessionHookFunc":         reflect.TypeOf((*q.OnRegisterSessionHookFunc)(nil)).Elem(),
			"OnSuccessHookFunc":                 reflect.TypeOf((*q.OnSuccessHookFunc)(nil)).Elem(),
			"PromptHandlerFunc":                 reflect.TypeOf((*q.PromptHandlerFunc)(nil)).Elem(),
			"ResourceHandlerFunc":               reflect.TypeOf((*q.ResourceHandlerFunc)(nil)).Elem(),
			"ResourceTemplateHandlerFunc":       reflect.TypeOf((*q.ResourceTemplateHandlerFunc)(nil)).Elem(),
			"SSEContextFunc":                    reflect.TypeOf((*q.SSEContextFunc)(nil)).Elem(),
			"SSEOption":                         reflect.TypeOf((*q.SSEOption)(nil)).Elem(),
			"SSEServer":                         reflect.TypeOf((*q.SSEServer)(nil)).Elem(),
			"ServerOption":                      reflect.TypeOf((*q.ServerOption)(nil)).Elem(),
			"ServerTool":                        reflect.TypeOf((*q.ServerTool)(nil)).Elem(),
			"StdioContextFunc":                  reflect.TypeOf((*q.StdioContextFunc)(nil)).Elem(),
			"StdioOption":                       reflect.TypeOf((*q.StdioOption)(nil)).Elem(),
			"StdioServer":                       reflect.TypeOf((*q.StdioServer)(nil)).Elem(),
			"ToolHandlerFunc":                   reflect.TypeOf((*q.ToolHandlerFunc)(nil)).Elem(),
			"ToolHandlerMiddleware":             reflect.TypeOf((*q.ToolHandlerMiddleware)(nil)).Elem(),
			"UnparseableMessageError":           reflect.TypeOf((*q.UnparseableMessageError)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{},
		Vars: map[string]reflect.Value{
			"ErrPromptNotFound":   reflect.ValueOf(&q.ErrPromptNotFound),
			"ErrResourceNotFound": reflect.ValueOf(&q.ErrResourceNotFound),
			"ErrToolNotFound":     reflect.ValueOf(&q.ErrToolNotFound),
			"ErrUnsupported":      reflect.ValueOf(&q.ErrUnsupported),
		},
		Funcs: map[string]reflect.Value{
			"ClientSessionFromContext":         reflect.ValueOf(q.ClientSessionFromContext),
			"NewMCPServer":                     reflect.ValueOf(q.NewMCPServer),
			"NewSSEServer":                     reflect.ValueOf(q.NewSSEServer),
			"NewStdioServer":                   reflect.ValueOf(q.NewStdioServer),
			"NewTestServer":                    reflect.ValueOf(q.NewTestServer),
			"ServeStdio":                       reflect.ValueOf(q.ServeStdio),
			"ServerFromContext":                reflect.ValueOf(q.ServerFromContext),
			"WithBasePath":                     reflect.ValueOf(q.WithBasePath),
			"WithBaseURL":                      reflect.ValueOf(q.WithBaseURL),
			"WithErrorLogger":                  reflect.ValueOf(q.WithErrorLogger),
			"WithHTTPServer":                   reflect.ValueOf(q.WithHTTPServer),
			"WithHooks":                        reflect.ValueOf(q.WithHooks),
			"WithInstructions":                 reflect.ValueOf(q.WithInstructions),
			"WithKeepAlive":                    reflect.ValueOf(q.WithKeepAlive),
			"WithKeepAliveInterval":            reflect.ValueOf(q.WithKeepAliveInterval),
			"WithLogging":                      reflect.ValueOf(q.WithLogging),
			"WithMessageEndpoint":              reflect.ValueOf(q.WithMessageEndpoint),
			"WithPaginationLimit":              reflect.ValueOf(q.WithPaginationLimit),
			"WithPromptCapabilities":           reflect.ValueOf(q.WithPromptCapabilities),
			"WithRecovery":                     reflect.ValueOf(q.WithRecovery),
			"WithResourceCapabilities":         reflect.ValueOf(q.WithResourceCapabilities),
			"WithSSEContextFunc":               reflect.ValueOf(q.WithSSEContextFunc),
			"WithSSEEndpoint":                  reflect.ValueOf(q.WithSSEEndpoint),
			"WithStdioContextFunc":             reflect.ValueOf(q.WithStdioContextFunc),
			"WithToolCapabilities":             reflect.ValueOf(q.WithToolCapabilities),
			"WithToolHandlerMiddleware":        reflect.ValueOf(q.WithToolHandlerMiddleware),
			"WithUseFullURLForMessageEndpoint": reflect.ValueOf(q.WithUseFullURLForMessageEndpoint),
		},
		TypedConsts:   map[string]igop.TypedConst{},
		UntypedConsts: map[string]igop.UntypedConst{},
	})
}
